/*
 * @(#)parseJtag.h    generated by: makeheader    Wed Jan  2 13:03:31 2019
 *
 *		built from:	public.h
 *				jtag.c
 *				parseJtag.c
 *				stimulus.c
 */

#ifndef parseSaleae_h
#define parseSaleae_h

#include "csv.h"

/*
 * The frames that are read in are generated when there is a change in a signal.  To get the uart parsing correct, we need to construct the frames in
 * between these changes.  This define sets the resolution of the samples that we will generate between frames.
 */
#define SAMPLE_TIME (10)


#define PACKET_SIZE (16 + 3)

typedef struct lbtrace_state_s {
   unsigned int
      idx;
   /*
    * state variables.
    */
   unsigned int
      last_clock;
   unsigned int
      packet[PACKET_SIZE];
   
} lbtrace_state_t;
   
/*
 * wire items from each frame.  These are memcpy'ed from next to current, so 
 * do not put state items here.
 */
typedef struct lbtrace_t {

   unsigned int
      data0,
      data1,
      clk,
      trigger,
      irq;

} lbtrace_t;

   

typedef struct frame_s {

   unsigned long long int
      time_nsecs;

   unsigned int sample;

   /*
    * Items for G2 uart.
    */
   unsigned int
      G2_recv,
      G2_xmit;
   unsigned int
      RTS;

   /*
    * two different LB trace instances
    */
   lbtrace_t
      lbtrace_0,
      lbtrace_1;
} frame_t;

void
   lbtrace_check (frame_t *frame, lbtrace_t *lbtrace, lbtrace_state_t *lbtrace_state);
void
   clock_check (frame_t *jf);
void
   hdr (frame_t *jf, char *h);
void
   hdr_with_lineno (char *h, unsigned int lineno);
void
   lbtrace_word_process (unsigned int word);
void
   packet_init (void);

void
   print_time_stamp (long long int time_stamp);

void
   rts_process (frame_t *frame);
void
   tag_find(unsigned int tag);
void
   tag_init(void);
void
   uart_process (frame_t *frame);

#endif /* parseJtag_h */
